@import "variables";

@media (max-width: 599px) {


  .sm-container{
    padding-left: 35px!important;
    padding-right: 35px!important;
    max-width: 1250px!important;
    margin: auto!important;
  }


  @each $element, $size in $sizes {
    .sm-txt-s-#{$element} {
      font-size: $size!important;
    }
  }

  .sm-txt-center{
    text-align: center!important;
  }



  /*::margin:: margin-*-*/

  /*All*/

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .sm-m-#{$alias}-#{$element} {
        @if $side == "all" {
          margin: $size!important;
        } @else {
          margin-#{$side}: $size!important;
        }
      }
    }
  }

  /*::Padding:: p-*-*/

  /*Padding All*/
  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .sm-p-#{$alias}-#{$element} {
        @if $side == "all" {
          padding: $size!important;
        } @else {
          padding-#{$side}: $size!important;
        }
      }
    }
  }


  /*::width*/

  .sm-full-width{
    width: 100%;
  }

  /*Align*/

  .sm-center{
    display: flex!important;
    justify-content: center!important;
  }

  /*::Color */



  /*::text color:: txt-c-* */
  @each $element, $color in $colors {
    .sm-txt-c-#{$element} {
      color: $color!important;
    }
  }

  /*::background:: bg-c-* */

  @each $element, $color in $colors {
    .sm-bg-c-#{$element} {
      background-color: $color!important;
    }
  }

  /*::border size:: border-s-* */

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .sm-bd-w-#{$alias}-#{$element} {
        @if $side == "all" {
          border-width: $size!important;
        } @else {
          border-#{$side}-width: $size!important;
        }
      }
    }
  }

  //*border color*/

  @each $element, $color in $colors {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .sm-bd-c-#{$alias}-#{$element} {
        @if $side == "all" {
          border-color: $color!important;
        } @else {
          border-#{$side}-color: $color!important;
        }
      }
    }
  }



  /*Border-radius*/

  //ALL
  @each $element,
  $size in $sizes {
    @each $side in $sides {
      $alias: map_get($side_aliases, $side);

      @if $side=="all" {

        .sm-bd-round-#{$alias}-#{$element} {
          border-radius: $size!important;
        }

      } @else {
        @each $s_side in $sides {
          $s_alias: map_get($side_aliases, $s_side);

          @if ($s_side !="all"and $s_side !=$side) {
            .sm-bd-round-#{$s_alias}-#{$alias}-#{$element} {
              @if $side=="all" {
                border-radius: $size!important;
              }

              @else {
                border-#{$s_side}-#{$side}-radius: $size!important;
              }
            }
          }

        }
      }
    }
  }
  /*::Layout */

  /*::grid */

  .sm-grid{
    display: grid!important;
  }

  @each $element, $template in $grids {
    .sm-grid-#{$element} {
      grid-template-columns: $template!important;
    }
  }


  /*Grid gaps*/
  @each $element, $size in $sizes {
    .sm-grid-gap-#{$element} {
      grid-gap: $size!important;
    }
  }

  //Column
  @each $element, $size in $sizes {
    .sm-grid-col-gap-#{$element} {
      grid-column-gap: $size!important;
    }
  }
  //Row
  @each $element, $size in $sizes {
    .sm-grid-row-gap-#{$element} {
      grid-row-gap: $size!important;
    }
  }

  /*::flex*/
  .sm-flex{
    display: flex!important;
  }

  .sm-flex.sm-column{
    flex-direction: column!important;
  }

  .sm-flex.sm-row{
    flex-direction: row!important;
  }

  .sm-flex.sm-row-responsive{
    flex-direction: row!important;
  }

  .sm-flex.sm-space-between{
    justify-content: space-between!important;
  }

  .sm-flex.sm-space-around{
    justify-content: space-around!important;
  }

  .sm-flex.sm-end{
    justify-content: flex-end!important;
  }

  .sm-flex.sm-start{
    justify-content: flex-start!important;
  }

  .sm-flex.sm-center{
    justify-content: center!important;
  }

  /*::Shadows shadow-**/

  @each $element, $shadow in $shadows {
    .sm-shadow-#{$element} {
      box-shadow: $shadow!important;
    }
  }

  /*Positioning*/

  .sm-fixed{
    position: fixed!important;
  }

  .sm-absolute{
    position: absolute!important;
  }

  .sm-relative{
    position: relative!important;
  }
  .sm-hide{
    display: none!important;
  }
  .sm-block{
    display: block!important;
  }

  .sm-inline-block{
    display: inline-block!important;
  }

  .sm-inline {
    display: inline!important;
  }
}
//md-css-property
@media (min-width: 600px) and (max-width: 899px) {


  .md-container{
    padding-left: 35px!important;
    padding-right: 35px!important;
    max-width: 1250px!important;
    margin: auto!important;
  }


  @each $element, $size in $sizes {
    .md-txt-s-#{$element} {
      font-size: $size!important;
    }
  }

  .md-txt-center{
    text-align: center!important;
  }
  /*::margin:: margin-*-*/

  /*All*/

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .md-m-#{$alias}-#{$element} {
        @if $side == "all" {
          margin: $size!important;
        } @else {
          margin-#{$side}: $size!important;
        }
      }
    }
  }

  /*::Padding:: p-*-*/

  /*Padding All*/
  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .md-p-#{$alias}-#{$element} {
        @if $side == "all" {
          padding: $size!important;
        } @else {
          padding-#{$side}: $size!important;
        }
      }
    }
  }


  /*::width*/

  .md-full-width{
    width: 100%;
  }

  /*Align*/

  .md-center{
    display: flex!important;
    justify-content: center!important;
  }

  /*::Color */



  /*::text color:: txt-c-* */
  @each $element, $color in $colors {
    .md-txt-c-#{$element} {
      color: $color!important;
    }
  }

  /*::background:: bg-c-* */

  @each $element, $color in $colors {
    .md-bg-c-#{$element} {
      background-color: $color!important;
    }
  }

  /*::border size:: border-s-* */

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .md-bd-w-#{$alias}-#{$element} {
        @if $side == "all" {
          border-width: $size!important;
        } @else {
          border-#{$side}-width: $size!important;
        }
      }
    }
  }

  //*border color*/

  @each $element, $color in $colors {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .md-bd-c-#{$alias}-#{$element} {
        @if $side == "all" {
          border-color: $color!important;
        } @else {
          border-#{$side}-color: $color!important;
        }
      }
    }
  }



  /*Border-radius*/

  //ALL
  @each $element,
  $size in $sizes {
    @each $side in $sides {
      $alias: map_get($side_aliases, $side);

      @if $side=="all" {

        .md-bd-round-#{$alias}-#{$element} {
          border-radius: $size!important;
        }

      } @else {
        @each $s_side in $sides {
          $s_alias: map_get($side_aliases, $s_side);

          @if ($s_side !="all"and $s_side !=$side) {
            .md-bd-round-#{$s_alias}-#{$alias}-#{$element} {
              @if $side=="all" {
                border-radius: $size!important;
              }

              @else {
                border-#{$s_side}-#{$side}-radius: $size!important;
              }
            }
          }

        }
      }
    }
  }
  /*::Layout */

  /*::grid */

  .md-grid{
    display: grid!important;
  }

  @each $element, $template in $grids {
    .md-grid-#{$element} {
      grid-template-columns: $template!important;
    }
  }


  /*Grid gaps*/
  @each $element, $size in $sizes {
    .md-grid-gap-#{$element} {
      grid-gap: $size!important;
    }
  }

  //Column
  @each $element, $size in $sizes {
    .md-grid-col-gap-#{$element} {
      grid-column-gap: $size!important;
    }
  }
  //Row
  @each $element, $size in $sizes {
    .md-grid-row-gap-#{$element} {
      grid-row-gap: $size!important;
    }
  }

  /*::flex*/
  .md-flex{
    display: flex!important;
  }

  .md-flex.md-column{
    flex-direction: column!important;
  }

  .md-flex.md-row{
    flex-direction: row!important;
  }

  .md-flex.md-row-responsive{
    flex-direction: row!important;
  }

  .md-flex.md-space-between{
    justify-content: space-between!important;
  }

  .md-flex.md-space-around{
    justify-content: space-around!important;
  }

  .md-flex.md-end{
    justify-content: flex-end!important;
  }

  .md-flex.md-start{
    justify-content: flex-start!important;
  }

  .md-flex.md-center{
    justify-content: center!important;
  }

  /*::Shadows shadow-**/

  @each $element, $shadow in $shadows {
    .md-shadow-#{$element} {
      box-shadow: $shadow!important;
    }
  }

  /*Positioning*/

  .md-fixed{
    position: fixed!important;
  }

  .md-absolute{
    position: absolute!important;
  }

  .md-relative{
    position: relative!important;
  }

  .md-hide{
    display: none!important;
  }

  .md-block{
    display: block!important;
  }

  .md-inline-block{
    display: inline-block!important;
  }

  .md-inline {
    display: inline!important;
  }
}
//lg-css-property
@media (min-width: 900px) and (max-width: 1199px) {
    /*tablet-landscape-only*/


  .lg-container{
    padding-left: 35px!important;
    padding-right: 35px!important;
    max-width: 1250px!important;
    margin: auto!important;
  }


  @each $element, $size in $sizes {
    .lg-txt-s-#{$element} {
      font-size: $size!important;
    }
  }

  .lg-txt-center{
    text-align: center!important;
  }



  /*::margin:: margin-*-*/

  /*All*/

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .lg-m-#{$alias}-#{$element} {
        @if $side == "all" {
          margin: $size!important;
        } @else {
          margin-#{$side}: $size!important;
        }
      }
    }
  }

  /*::Padding:: p-*-*/

  /*Padding All*/
  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .lg-p-#{$alias}-#{$element} {
        @if $side == "all" {
          padding: $size!important;
        } @else {
          padding-#{$side}: $size!important;
        }
      }
    }
  }


  /*::width*/

  .lg-full-width{
    width: 100%;
  }

  /*Align*/

  .lg-center{
    display: flex!important;
    justify-content: center!important;
  }

  /*::Color */



  /*::text color:: txt-c-* */
  @each $element, $color in $colors {
    .lg-txt-c-#{$element} {
      color: $color!important;
    }
  }

  /*::background:: bg-c-* */

  @each $element, $color in $colors {
    .lg-bg-c-#{$element} {
      background-color: $color!important;
    }
  }

  /*::border size:: border-s-* */

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .lg-bd-w-#{$alias}-#{$element} {
        @if $side == "all" {
          border-width: $size!important;
        } @else {
          border-#{$side}-width: $size!important;
        }
      }
    }
  }

  //*border color*/

  @each $element, $color in $colors {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .lg-bd-c-#{$alias}-#{$element} {
        @if $side == "all" {
          border-color: $color!important;
        } @else {
          border-#{$side}-color: $color!important;
        }
      }
    }
  }



  /*Border-radius*/

  //ALL
  @each $element,
  $size in $sizes {
    @each $side in $sides {
      $alias: map_get($side_aliases, $side);

      @if $side=="all" {

        .lg-bd-round-#{$alias}-#{$element} {
          border-radius: $size!important;
        }

      }

      @else {
        @each $s_side in $sides {
          $s_alias: map_get($side_aliases, $s_side);

          @if ($s_side !="all"and $s_side !=$side) {
            .lg-bd-round-#{$s_alias}-#{$alias}-#{$element} {
              @if $side=="all" {
                border-radius: $size!important;
              }

              @else {
                border-#{$s_side}-#{$side}-radius: $size!important;
              }
            }
          }

        }
      }
    }
  }
  /*::Layout */

  /*::grid */

  .lg-grid{
    display: grid!important;
  }

  @each $element, $template in $grids {
    .lg-grid-#{$element} {
      grid-template-columns: $template!important;
    }
  }


  /*Grid gaps*/
  @each $element, $size in $sizes {
    .lg-grid-gap-#{$element} {
      grid-gap: $size!important;
    }
  }

  //Column
  @each $element, $size in $sizes {
    .lg-grid-col-gap-#{$element} {
      grid-column-gap: $size!important;
    }
  }
  //Row
  @each $element, $size in $sizes {
    .lg-grid-row-gap-#{$element} {
      grid-row-gap: $size!important;
    }
  }

  /*::flex*/
  .lg-flex{
    display: flex!important;
  }

  .lg-flex.lg-column{
    flex-direction: column!important;
  }

  .lg-flex.lg-row{
    flex-direction: row!important;
  }

  .lg-flex.lg-row-responsive{
    flex-direction: row!important;
  }

  .lg-flex.lg-space-between{
    justify-content: space-between!important;
  }

  .lg-flex.lg-space-around{
    justify-content: space-around!important;
  }

  .lg-flex.lg-end{
    justify-content: flex-end!important;
  }

  .lg-flex.lg-start{
    justify-content: flex-start!important;
  }

  .lg-flex.lg-center{
    justify-content: center!important;
  }

  /*::Shadows shadow-**/

  @each $element, $shadow in $shadows {
    .lg-shadow-#{$element} {
      box-shadow: $shadow!important;
    }
  }

  /*Positioning*/

  .lg-fixed{
    position: fixed!important;
  }

  .lg-absolute{
    position: absolute!important;
  }

  .lg-relative{
    position: relative!important;
  }

  .lg-hide{
    display: none!important;
  }

  .lg-block{
    display: block!important;
  }

  .lg-inline-block{
    display: inline-block!important;
  }

  .lg-inline {
    display: inline!important;
  }
}
//xlg-css-property
@media (min-width: 1000px) and (max-width: 1199px){
    /*.desktop-only */


  .xlg-container{
    padding-left: 35px!important;
    padding-right: 35px!important;
    max-width: 1250px!important;
    margin: auto!important;
  }


  @each $element, $size in $sizes {
    .xlg-txt-s-#{$element} {
      font-size: $size!important;
    }
  }

  .xlg-txt-center{
    text-align: center!important;
  }



  /*::margin:: margin-*-*/

  /*All*/

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xlg-m-#{$alias}-#{$element} {
        @if $side == "all" {
          margin: $size!important;
        } @else {
          margin-#{$side}: $size!important;
        }
      }
    }
  }

  /*::Padding:: p-*-*/

  /*Padding All*/
  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xlg-p-#{$alias}-#{$element} {
        @if $side == "all" {
          padding: $size!important;
        } @else {
          padding-#{$side}: $size!important;
        }
      }
    }
  }


  /*::width*/

  .xlg-full-width{
    width: 100%;
  }

  /*Align*/

  .xlg-center{
    display: flex!important;
    justify-content: center!important;
  }

  /*::Color */



  /*::text color:: txt-c-* */
  @each $element, $color in $colors {
    .xlg-txt-c-#{$element} {
      color: $color!important;
    }
  }

  /*::background:: bg-c-* */

  @each $element, $color in $colors {
    .xlg-bg-c-#{$element} {
      background-color: $color!important;
    }
  }

  /*::border size:: border-s-* */

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xlg-bd-w-#{$alias}-#{$element} {
        @if $side == "all" {
          border-width: $size!important;
        } @else {
          border-#{$side}-width: $size!important;
        }
      }
    }
  }

  //*border color*/

  @each $element, $color in $colors {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xlg-bd-c-#{$alias}-#{$element} {
        @if $side == "all" {
          border-color: $color!important;
        } @else {
          border-#{$side}-color: $color!important;
        }
      }
    }
  }



  /*Border-radius*/

  //ALL
  @each $element,
  $size in $sizes {
    @each $side in $sides {
      $alias: map_get($side_aliases, $side);

      @if $side=="all" {

        .xlg-bd-round-#{$alias}-#{$element} {
          border-radius: $size!important;
        }

      }

      @else {
        @each $s_side in $sides {
          $s_alias: map_get($side_aliases, $s_side);

          @if ($s_side !="all"and $s_side !=$side) {
            .xlg-bd-round-#{$s_alias}-#{$alias}-#{$element} {
              @if $side=="all" {
                border-radius: $size!important;
              }

              @else {
                border-#{$s_side}-#{$side}-radius: $size!important;
              }
            }
          }

        }
      }
    }
  }
  /*::Layout */

  /*::grid */

  .xlg-grid{
    display: grid!important;
  }

  @each $element, $template in $grids {
    .xlg-grid-#{$element} {
      grid-template-columns: $template!important;
    }
  }


  /*Grid gaps*/
  @each $element, $size in $sizes {
    .xlg-grid-gap-#{$element} {
      grid-gap: $size!important;
    }
  }

  //Column
  @each $element, $size in $sizes {
    .xlg-grid-col-gap-#{$element} {
      grid-column-gap: $size!important;
    }
  }
  //Row
  @each $element, $size in $sizes {
    .xlg-grid-row-gap-#{$element} {
      grid-row-gap: $size!important;
    }
  }

  /*::flex*/
  .xlg-flex{
    display: flex!important;
  }

  .xlg-flex.xlg-column{
    flex-direction: column!important;
  }

  .xlg-flex.xlg-row{
    flex-direction: row!important;
  }

  .xlg-flex.xlg-row-responsive{
    flex-direction: row!important;
  }

  .xlg-flex.xlg-space-between{
    justify-content: space-between!important;
  }

  .xlg-flex.xlg-space-around{
    justify-content: space-around!important;
  }

  .xlg-flex.xlg-end{
    justify-content: flex-end!important;
  }

  .xlg-flex.xlg-start{
    justify-content: flex-start!important;
  }

  .xlg-flex.xlg-center{
    justify-content: center!important;
  }

  /*::Shadows shadow-**/

  @each $element, $shadow in $shadows {
    .xlg-shadow-#{$element} {
      box-shadow: $shadow!important;
    }
  }

  /*Positioning*/

  .xlg-fixed{
    position: fixed!important;
  }

  .xlg-absolute{
    position: absolute!important;
  }

  .xlg-relative{
    position: relative!important;
  }

  .xlg-hide{
    display: none!important;
  }

  .xlg-block{
    display: block!important;
  }

  .xlg-inline-block{
    display: inline-block!important;
  }

  .xlg-inline {
    display: inline!important;
  }

}
//xxlg-css-property
@media (min-width: 1200px) {
    /*.desktop-up */


  .xxlg-container{
    padding-left: 35px!important;
    padding-right: 35px!important;
    max-width: 1250px!important;
    margin: auto!important;
  }


  @each $element, $size in $sizes {
    .xxlg-txt-s-#{$element} {
      font-size: $size!important;
    }
  }

  .xxlg-txt-center{
    text-align: center!important;
  }



  /*::margin:: margin-*-*/

  /*All*/

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xxlg-m-#{$alias}-#{$element} {
        @if $side == "all" {
          margin: $size!important;
        } @else {
          margin-#{$side}: $size!important;
        }
      }
    }
  }

  /*::Padding:: p-*-*/

  /*Padding All*/
  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xxlg-p-#{$alias}-#{$element} {
        @if $side == "all" {
          padding: $size!important;
        } @else {
          padding-#{$side}: $size!important;
        }
      }
    }
  }


  /*::width*/

  .xxlg-full-width{
    width: 100%;
  }

  /*Align*/

  .xxlg-center{
    display: flex!important;
    justify-content: center!important;
  }

  /*::Color */



  /*::text color:: txt-c-* */
  @each $element, $color in $colors {
    .xxlg-txt-c-#{$element} {
      color: $color!important;
    }
  }

  /*::background:: bg-c-* */

  @each $element, $color in $colors {
    .xxlg-bg-c-#{$element} {
      background-color: $color!important;
    }
  }

  /*::border size:: border-s-* */

  @each $element, $size in $sizes {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xxlg-bd-w-#{$alias}-#{$element} {
        @if $side == "all" {
          border-width: $size!important;
        } @else {
          border-#{$side}-width: $size!important;
        }
      }
    }
  }

  //*border color*/

  @each $element, $color in $colors {
    @each $side in $sides{
      $alias: map_get($side_aliases,$side);
      .xxlg-bd-c-#{$alias}-#{$element} {
        @if $side == "all" {
          border-color: $color!important;
        } @else {
          border-#{$side}-color: $color!important;
        }
      }
    }
  }



  /*Border-radius*/

  //ALL
  @each $element,
  $size in $sizes {
    @each $side in $sides {
      $alias: map_get($side_aliases, $side);

      @if $side=="all" {

        .xxlg-bd-round-#{$alias}-#{$element} {
          border-radius: $size!important;
        }

      }

      @else {
        @each $s_side in $sides {
          $s_alias: map_get($side_aliases, $s_side);

          @if ($s_side !="all"and $s_side !=$side) {
            .xxlg-bd-round-#{$s_alias}-#{$alias}-#{$element} {
              @if $side=="all" {
                border-radius: $size!important;
              }

              @else {
                border-#{$s_side}-#{$side}-radius: $size!important;
              }
            }
          }

        }
      }
    }
  }
  /*::Layout */

  /*::grid */

  .xxlg-grid{
    display: grid!important;
  }

  @each $element, $template in $grids {
    .xxlg-grid-#{$element} {
      grid-template-columns: $template!important;
    }
  }


  /*Grid gaps*/
  @each $element, $size in $sizes {
    .xxlg-grid-gap-#{$element} {
      grid-gap: $size!important;
    }
  }

  //Column
  @each $element, $size in $sizes {
    .xxlg-grid-col-gap-#{$element} {
      grid-column-gap: $size!important;
    }
  }
  //Row
  @each $element, $size in $sizes {
    .xxlg-grid-row-gap-#{$element} {
      grid-row-gap: $size!important;
    }
  }

  /*::flex*/
  .xxlg-flex{
    display: flex!important;
  }

  .xxlg-flex.xxlg-column{
    flex-direction: column!important;
  }

  .xxlg-flex.xxlg-row{
    flex-direction: row!important;
  }

  .xxlg-flex.xxlg-row-responsive{
    flex-direction: row!important;
  }

  .xxlg-flex.xxlg-space-between{
    justify-content: space-between!important;
  }

  .xxlg-flex.xxlg-space-around{
    justify-content: space-around!important;
  }

  .xxlg-flex.xxlg-end{
    justify-content: flex-end!important;
  }

  .xxlg-flex.xxlg-start{
    justify-content: flex-start!important;
  }

  .xxlg-flex.xxlg-center{
    justify-content: center!important;
  }

  /*::Shadows shadow-**/

  @each $element, $shadow in $shadows {
    .xxlg-shadow-#{$element} {
      box-shadow: $shadow!important;
    }
  }

  /*Positioning*/

  .xxlg-fixed{
    position: fixed!important;
  }

  .xxlg-absolute{
    position: absolute!important;
  }

  .xxlg-relative{
    position: relative!important;
  }

  .xxlg-hide{
    display: none!important;
  }

  .xxlg-block{
    display: block!important;
  }

  .xxlg-inline-block{
    display: inline-block!important;
  }

  .xxlg-inline {
    display: inline!important;
  }
}